# =============================================================================
# TCP KEEP-ALIVE DETAILED DEMO
# =============================================================================

import socket
import sys
import time
import json
import threading
import signal

def signal_handler(signum, frame):
    """Handle Ctrl+C gracefully"""
    print(json.dumps({
        'action': 'user_interrupted',
        'message': 'Nh·∫≠n t√≠n hi·ªáu ng·∫Øt t·ª´ user',
        'time': time.time() - start_time
    }))
    sys.exit(0)

# Register signal handler
signal.signal(signal.SIGINT, signal_handler)

print("üî¨ TCP Keep-Alive Detailed Demo")
print("="*40)

# Parse command line arguments
host = sys.argv[1] if len(sys.argv) > 1 else '127.0.0.1'
port = int(sys.argv[2] if len(sys.argv) > 2 else 7000)

# Keep-alive configuration (r√∫t ng·∫Øn cho demo)
IDLE = 5    # B·∫Øt ƒë·∫ßu g·ª≠i probe sau 5 gi√¢y idle
INTVL = 2   # G·ª≠i probe m·ªói 2 gi√¢y  
CNT = 3     # G·ª≠i t·ªëi ƒëa 3 probes tr∆∞·ªõc khi b·ªè cu·ªôc

print(f"üìã C·∫•u h√¨nh Keep-Alive:")
print(f"   üéØ Target: {host}:{port}")
print(f"   ‚è∞ TCP_KEEPIDLE: {IDLE} seconds (idle time tr∆∞·ªõc khi g·ª≠i probe)")
print(f"   üì° TCP_KEEPINTVL: {INTVL} seconds (interval gi·ªØa c√°c probes)")
print(f"   üîÑ TCP_KEEPCNT: {CNT} probes (s·ªë probe t·ªëi ƒëa)")
print(f"   ‚è±Ô∏è  Max detection time: ~{IDLE + (INTVL * CNT)} seconds")

start_time = time.time()

print(json.dumps({
    'action': 'demo_started',
    'config': {
        'host': host,
        'port': port,
        'keepidle': IDLE,
        'keepintvl': INTVL,
        'keepcnt': CNT,
        'max_detection_time': IDLE + (INTVL * CNT)
    },
    'time': 0
}))

try:
    print(f"\nüîå ƒêang k·∫øt n·ªëi ƒë·∫øn {host}:{port}...")
    
    # T·∫°o connection v·ªõi timeout
    with socket.create_connection((host, port), timeout=10) as s:
        current_time = time.time() - start_time
        print(json.dumps({
            'action': 'connected',
            'message': f'K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn {host}:{port}',
            'time': current_time
        }))
        
        # *** QUAN TR·ªåNG: C·∫•u h√¨nh Keep-Alive ***
        print(f"\nüîß ƒêang c·∫•u h√¨nh TCP Keep-Alive...")
        
        # B·∫≠t keep-alive
        s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
        keepalive_enabled = s.getsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE)
        print(f"   ‚úÖ SO_KEEPALIVE: {'Enabled' if keepalive_enabled else 'Disabled'}")
        
        # C·∫•u h√¨nh keep-alive parameters (platform-dependent)
        config_success = []
        try:
            # TCP_KEEPIDLE: Th·ªùi gian idle tr∆∞·ªõc khi g·ª≠i probe ƒë·∫ßu ti√™n
            if hasattr(socket, 'TCP_KEEPIDLE'):
                s.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, IDLE)
                config_success.append(f"TCP_KEEPIDLE={IDLE}s")
            elif hasattr(socket, 'TCP_KEEPALIVE'):  # macOS
                s.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPALIVE, IDLE)
                config_success.append(f"TCP_KEEPALIVE={IDLE}s")
            
            # TCP_KEEPINTVL: Kho·∫£ng c√°ch gi·ªØa c√°c probes
            if hasattr(socket, 'TCP_KEEPINTVL'):
                s.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPINTVL, INTVL)
                config_success.append(f"TCP_KEEPINTVL={INTVL}s")
            
            # TCP_KEEPCNT: S·ªë probes t·ªëi ƒëa
            if hasattr(socket, 'TCP_KEEPCNT'):
                s.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPCNT, CNT)
                config_success.append(f"TCP_KEEPCNT={CNT}")
                
        except Exception as e:
            print(json.dumps({
                'action': 'keepalive_config_partial',
                'message': 'M·ªôt s·ªë tham s·ªë keep-alive kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n platform n√†y',
                'error': str(e),
                'time': time.time() - start_time
            }))
        
        if config_success:
            print(f"   ‚úÖ Configured: {', '.join(config_success)}")
        
        print(json.dumps({
            'action': 'keepalive_configured',
            'params': {
                'idle': IDLE,
                'intvl': INTVL, 
                'cnt': CNT
            },
            'platform_support': config_success,
            'time': time.time() - start_time
        }))
        
        print(f"\nüéÆ Demo scenarios:")
        print(f"   1Ô∏è‚É£  Connection s·∫Ω idle ƒë·ªÉ trigger keep-alive probes")
        print(f"   2Ô∏è‚É£  Sau {IDLE} gi√¢y, TCP stack s·∫Ω g·ª≠i probe packets")
        print(f"   3Ô∏è‚É£  N·∫øu server kh√¥ng ph·∫£n h·ªìi, connection s·∫Ω b·ªã ƒë√≥ng")
        print(f"   4Ô∏è‚É£  B·∫°n c√≥ th·ªÉ kill server ƒë·ªÉ test disconnect detection")
        
        print(f"\nüí° Commands ƒë·ªÉ test:")
        print(f"   ‚Ä¢ Kill server process ƒë·ªÉ simulate network failure")
        print(f"   ‚Ä¢ Disconnect network ƒë·ªÉ test keep-alive")
        print(f"   ‚Ä¢ Ho·∫∑c ƒë·ª£i ƒë·ªÉ xem normal keep-alive behavior")
        
        print(f"\nüîÑ Monitoring connection... (Ctrl+C ƒë·ªÉ tho√°t)")
        
        last_activity = time.time()
        heartbeat_interval = 30  # Send heartbeat every 30 seconds
        
        while True:
            current_time = time.time()
            elapsed = current_time - start_time
            
            # G·ª≠i heartbeat m·ªói 30 gi√¢y ƒë·ªÉ test connection
            if current_time - last_activity >= heartbeat_interval:
                try:
                    # G·ª≠i small heartbeat message
                    heartbeat_msg = b'ping'
                    s.send(heartbeat_msg)
                    
                    print(json.dumps({
                        'action': 'heartbeat_sent',
                        'message': f'G·ª≠i heartbeat ({len(heartbeat_msg)} bytes)',
                        'time': elapsed
                    }))
                    
                    last_activity = current_time
                    
                except socket.error as e:
                    print(json.dumps({
                        'action': 'heartbeat_failed',
                        'message': 'Heartbeat th·∫•t b·∫°i - connection c√≥ th·ªÉ ƒë√£ b·ªã ƒë√≥ng',
                        'error': str(e),
                        'time': elapsed
                    }))
                    break
            
            # Test connection b·∫±ng c√°ch g·ª≠i empty data
            try:
                s.send(b'')  # G·ª≠i empty packet ƒë·ªÉ test connection
                time.sleep(1)  # Sleep 1 gi√¢y tr∆∞·ªõc khi test ti·∫øp
                
            except socket.error as e:
                print(json.dumps({
                    'action': 'disconnect_detected',
                    'message': 'Ph√°t hi·ªán connection b·ªã ng·∫Øt',
                    'error': str(e),
                    'time': elapsed,
                    'detection_method': 'send_failed'
                }))
                break
            
            # Log status m·ªói 10 gi√¢y
            if int(elapsed) % 10 == 0 and elapsed > 0:
                print(json.dumps({
                    'action': 'status_update',
                    'message': f'Connection ƒëang ho·∫°t ƒë·ªông, elapsed: {elapsed:.1f}s',
                    'time': elapsed
                }))
                time.sleep(1)  # Tr√°nh spam log
                
except socket.timeout:
    print(json.dumps({
        'action': 'connection_timeout',
        'message': 'Connection timeout',
        'time': time.time() - start_time
    }))
except ConnectionRefusedError:
    print(json.dumps({
        'action': 'connection_refused',
        'message': 'Server t·ª´ ch·ªëi k·∫øt n·ªëi - ƒë·∫£m b·∫£o server ƒëang ch·∫°y',
        'time': time.time() - start_time
    }))
except Exception as e:
    print(json.dumps({
        'action': 'unexpected_error',
        'message': f'L·ªói b·∫•t ng·ªù: {str(e)}',
        'time': time.time() - start_time
    }))

print(json.dumps({
    'action': 'demo_ended',
    'message': 'Keep-alive demo k·∫øt th√∫c',
    'total_time': time.time() - start_time
}))