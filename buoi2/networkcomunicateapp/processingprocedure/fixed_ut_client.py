#!/usr/bin/env python3
"""
Fixed UT Client ƒë·ªÉ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi ut.edu.vn
"""
import socket
import time
from datetime import datetime

class FixedUTClient:
    def __init__(self):
        # Th·ª≠ nhi·ªÅu c√°ch k·∫øt n·ªëi
        self.targets = [
            {"host": "ut.edu.vn", "ip": "115.78.73.226", "port": 80},
            {"host": "google.com", "ip": "8.8.8.8", "port": 80},  # Backup test
            {"host": "httpbin.org", "ip": "3.212.43.104", "port": 80}  # Backup test
        ]
        
    def test_basic_connection(self, host, ip, port, timeout=10):
        """Test k·∫øt n·ªëi TCP c∆° b·∫£n"""
        try:
            print(f"üîç Test k·∫øt n·ªëi TCP ƒë·∫øn {host} ({ip}:{port})")
            
            # T·∫°o socket v·ªõi timeout
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client_socket.settimeout(timeout)
            
            start_time = time.time()
            result = client_socket.connect_ex((ip, port))
            connect_time = time.time() - start_time
            
            client_socket.close()
            
            if result == 0:
                print(f"‚úÖ K·∫øt n·ªëi TCP th√†nh c√¥ng! Th·ªùi gian: {connect_time:.3f}s")
                return True
            else:
                print(f"‚ùå K·∫øt n·ªëi TCP th·∫•t b·∫°i! Error code: {result}")
                return False
                
        except socket.timeout:
            print(f"‚ùå Timeout sau {timeout}s")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
            
    def send_http_request(self, host, ip, port, path="/"):
        """G·ª≠i HTTP request"""
        try:
            print(f"üì§ G·ª≠i HTTP request ƒë·∫øn {host} ({ip}:{port})")
            
            # T·∫°o socket
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client_socket.settimeout(15)  # 15s timeout
            
            # K·∫øt n·ªëi
            start_time = time.time()
            client_socket.connect((ip, port))
            connect_time = time.time() - start_time
            
            print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! Th·ªùi gian: {connect_time:.3f}s")
            
            # T·∫°o HTTP request ƒë∆°n gi·∫£n
            http_request = f"""GET {path} HTTP/1.1\r
Host: {host}\r
User-Agent: Python-Client/1.0\r
Accept: text/html\r
Connection: close\r
\r
"""
            
            print(f"üì® G·ª≠i request: GET {path}")
            
            # G·ª≠i request
            client_socket.send(http_request.encode('utf-8'))
            
            # Nh·∫≠n response
            response_data = b""
            start_receive = time.time()
            
            while True:
                try:
                    chunk = client_socket.recv(4096)
                    if not chunk:
                        break
                    response_data += chunk
                    
                    # Gi·ªõi h·∫°n th·ªùi gian nh·∫≠n
                    if time.time() - start_receive > 10:
                        break
                        
                except socket.timeout:
                    break
                    
            client_socket.close()
            
            # Ph√¢n t√≠ch response
            self.analyze_response(response_data, host)
            
            return True
            
        except socket.timeout:
            print("‚ùå Timeout khi g·ª≠i HTTP request")
            return False
        except ConnectionRefusedError:
            print("‚ùå K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói HTTP request: {e}")
            return False
            
    def analyze_response(self, response_data, host):
        """Ph√¢n t√≠ch HTTP response"""
        try:
            if not response_data:
                print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response")
                return
                
            # Decode response
            response_text = response_data.decode('utf-8', errors='ignore')
            
            # T√°ch header v√† body
            if '\\r\\n\\r\\n' in response_text:
                headers, body = response_text.split('\\r\\n\\r\\n', 1)
            else:
                headers = response_text[:500]  # Ch·ªâ l·∫•y ph·∫ßn ƒë·∫ßu
                body = ""
                
            print(f"üì• Response t·ª´ {host}:")
            
            # Ph√¢n t√≠ch status line
            lines = headers.split('\\r\\n')
            if lines:
                status_line = lines[0]
                print(f"  üìä Status: {status_line}")
                
                # Extract status code
                if 'HTTP' in status_line:
                    parts = status_line.split()
                    if len(parts) >= 2:
                        status_code = parts[1]
                        if status_code.startswith('2'):
                            print("  ‚úÖ Response th√†nh c√¥ng!")
                        elif status_code.startswith('3'):
                            print("  üîÑ Redirect response")
                        else:
                            print(f"  ‚ö†Ô∏è Status code: {status_code}")
                
                # M·ªôt s·ªë header quan tr·ªçng
                for line in lines[1:10]:  # Ch·ªâ l·∫•y 10 header ƒë·∫ßu
                    if ':' in line:
                        key, value = line.split(':', 1)
                        key = key.strip().lower()
                        value = value.strip()
                        
                        if key in ['content-type', 'content-length', 'server']:
                            print(f"  üìã {key.title()}: {value}")
                            
            print(f"  üì¶ T·ªïng k√≠ch th∆∞·ªõc: {len(response_data)} bytes")
            
            # Hi·ªÉn th·ªã m·ªôt ph·∫ßn body n·∫øu c√≥
            if body and len(body) > 0:
                body_preview = body[:100].strip()
                if 'html' in body_preview.lower():
                    print("  üåê Nh·∫≠n ƒë∆∞·ª£c HTML content")
                else:
                    print(f"  üìÑ Content preview: {body_preview[:50]}...")
                    
        except Exception as e:
            print(f"‚ùå L·ªói ph√¢n t√≠ch response: {e}")
            print(f"üì¶ Raw data size: {len(response_data)} bytes")
            
    def run_tests(self):
        """Ch·∫°y test v·ªõi t·∫•t c·∫£ targets"""
        print("=" * 70)
        print("üåê NETWORK CONNECTION TESTS")
        print("=" * 70)
        print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        success_count = 0
        
        for i, target in enumerate(self.targets, 1):
            print(f"{i}Ô∏è‚É£ TEST {target['host'].upper()}")
            print("-" * 50)
            
            # Test TCP connection
            tcp_success = self.test_basic_connection(
                target['host'], target['ip'], target['port']
            )
            
            if tcp_success:
                # Test HTTP request
                http_success = self.send_http_request(
                    target['host'], target['ip'], target['port']
                )
                
                if http_success:
                    success_count += 1
                    print("üéâ Test th√†nh c√¥ng!")
                else:
                    print("‚ùå HTTP request th·∫•t b·∫°i")
            else:
                print("‚ùå TCP connection th·∫•t b·∫°i")
                
            print()
            
        print("=" * 70)
        print(f"üìä K·∫æT QU·∫¢: {success_count}/{len(self.targets)} tests th√†nh c√¥ng")
        if success_count > 0:
            print("‚úÖ K·∫øt n·ªëi m·∫°ng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!")
        else:
            print("‚ùå T·∫•t c·∫£ k·∫øt n·ªëi ƒë·ªÅu th·∫•t b·∫°i - ki·ªÉm tra m·∫°ng/firewall")
        print("=" * 70)

def main():
    client = FixedUTClient()
    
    try:
        client.run_tests()
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Test b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\\n‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()